[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 celery authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/kmeans.html","id":"a-brief-introduction-to-the-k-means-algorithm","dir":"Articles","previous_headings":"","what":"A brief introduction to the k-means algorithm","title":"kmeans","text":"k-means method unsupervised learning produces partitioning observations k unique clusters. goal k-means minimize sum squared Euclidian distances observations cluster centroid, geometric mean, cluster. k-means clustering, observed variables (columns) considered locations orthogonal axes multidimensional space. example, plot , point represents observation one penguin, location 2-dimensional space determined bill length bill depth penguin.  k-means cluster assignment achieved iterating convergence random initial conditions. algorithm proceeds follows: Choose k random observations dataset. locations space declared initial centroids. Assign observation nearest centroid. [pic - automatic functions . predict pre-supplied centroids cool.] Compute new centroids cluster. Repeat steps 2 3 centroids change. [gif?]","code":"#> Warning: Removed 2 rows containing missing values (geom_point)."},{"path":"/articles/kmeans.html","id":"things-to-note","dir":"Articles","previous_headings":"A brief introduction to the k-means algorithm","what":"Things to note","title":"kmeans","text":"k-means relies random initial conditions, procedure may result identical cluster assignments subsequent runs. k-means greedy algorithm, guaranteed achieve globally optimal solution. k-means produces partition: observation assigned exactly one cluster k-means non-stochastic approach; probability model assumed regarding selection observations values variables.","code":""},{"path":"/articles/kmeans.html","id":"k-means-specification-in-celery","dir":"Articles","previous_headings":"","what":"k-means specification in {celery}","title":"kmeans","text":"specify k-means model celery, simply choose value \\(k\\) engine: specified, model may “fit” dataset providing formula data frame. Note unlike supervised modeling, formula include response variable. access results produced engine - case, stats::kmeans - simply extract fit fitted model object:","code":"kmeans_spec <- k_means(k = 3) %>%   set_engine_celery(\"stats\")   kmeans_spec #> K Means Cluster Specification (partition) #>  #> Main Arguments: #>   k = 3 #>  #> Computational engine: stats kmeans_spec_fit <- kmeans_spec %>%   fit(~ bill_length_mm + bill_depth_mm, data = penguins)  kmeans_spec_fit #> celery cluster object #>  #> K-means clustering with 3 clusters of sizes 85, 116, 141 #>  #> Cluster means: #>   bill_length_mm bill_depth_mm #> 1       50.90353      17.33647 #> 2       45.51379      15.64397 #> 3       38.40355      18.27943 #>  #> Clustering vector: #>   1   2   3   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  #>   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   2   3  #>  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  #>   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3  #>  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  #>   3   3   2   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3  #>  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  #>   3   3   3   3   3   3   3   3   3   3   3   3   2   3   2   3   3   3   3   3  #>  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101  #>   2   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   2   3  #> 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121  #>   3   3   3   3   3   3   3   3   2   3   2   3   3   3   2   3   3   3   3   3  #> 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141  #>   3   3   3   3   3   3   3   3   2   3   2   3   3   3   3   3   3   3   3   3  #> 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161  #>   3   3   3   3   3   3   3   3   3   3   3   2   1   2   1   2   2   2   2   2  #> 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181  #>   2   2   1   2   2   2   1   2   1   2   1   1   2   2   2   2   2   2   2   2  #> 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201  #>   1   2   2   2   1   1   1   2   2   2   1   2   1   2   1   1   2   2   1   2  #> 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221  #>   2   2   2   2   1   2   2   2   2   2   1   2   2   2   1   2   1   2   1   2  #> 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241  #>   1   2   2   2   2   2   1   2   1   2   2   1   1   2   1   2   1   2   1   2  #> 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261  #>   1   2   1   2   1   2   1   1   2   2   1   2   1   2   1   2   2   2   1   2  #> 262 263 264 265 266 267 268 269 270 271 273 274 275 276 277 278 279 280 281 282  #>   2   1   1   2   1   2   1   2   1   2   2   1   2   1   2   1   1   2   1   2  #> 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302  #>   2   1   2   1   2   1   2   1   2   1   1   1   2   1   2   1   2   1   2   1  #> 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322  #>   1   1   2   1   3   1   2   1   1   2   2   1   2   1   1   2   1   2   1   1  #> 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342  #>   1   1   1   1   2   1   2   1   2   1   2   1   1   2   1   2   2   1   2   1  #> 343 344  #>   1   1  #>  #> Within cluster sum of squares by cluster: #> [1] 617.9859 754.7437 944.4986 #>  (between_SS / total_SS =  79.8 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\" kmeans_spec_fit$fit #> K-means clustering with 3 clusters of sizes 85, 116, 141 #>  #> Cluster means: #>   bill_length_mm bill_depth_mm #> 1       50.90353      17.33647 #> 2       45.51379      15.64397 #> 3       38.40355      18.27943 #>  #> Clustering vector: #>   1   2   3   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  #>   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   2   3  #>  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  #>   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3  #>  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  #>   3   3   2   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3  #>  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  #>   3   3   3   3   3   3   3   3   3   3   3   3   2   3   2   3   3   3   3   3  #>  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101  #>   2   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   2   3  #> 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121  #>   3   3   3   3   3   3   3   3   2   3   2   3   3   3   2   3   3   3   3   3  #> 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141  #>   3   3   3   3   3   3   3   3   2   3   2   3   3   3   3   3   3   3   3   3  #> 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161  #>   3   3   3   3   3   3   3   3   3   3   3   2   1   2   1   2   2   2   2   2  #> 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181  #>   2   2   1   2   2   2   1   2   1   2   1   1   2   2   2   2   2   2   2   2  #> 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201  #>   1   2   2   2   1   1   1   2   2   2   1   2   1   2   1   1   2   2   1   2  #> 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221  #>   2   2   2   2   1   2   2   2   2   2   1   2   2   2   1   2   1   2   1   2  #> 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241  #>   1   2   2   2   2   2   1   2   1   2   2   1   1   2   1   2   1   2   1   2  #> 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261  #>   1   2   1   2   1   2   1   1   2   2   1   2   1   2   1   2   2   2   1   2  #> 262 263 264 265 266 267 268 269 270 271 273 274 275 276 277 278 279 280 281 282  #>   2   1   1   2   1   2   1   2   1   2   2   1   2   1   2   1   1   2   1   2  #> 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302  #>   2   1   2   1   2   1   2   1   2   1   1   1   2   1   2   1   2   1   2   1  #> 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322  #>   1   1   2   1   3   1   2   1   1   2   2   1   2   1   1   2   1   2   1   1  #> 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342  #>   1   1   1   1   2   1   2   1   2   1   2   1   1   2   1   2   2   1   2   1  #> 343 344  #>   1   1  #>  #> Within cluster sum of squares by cluster: #> [1] 617.9859 754.7437 944.4986 #>  (between_SS / total_SS =  79.8 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\""},{"path":"/articles/kmeans.html","id":"cluster-assignments-and-predictions","dir":"Articles","previous_headings":"k-means specification in {celery}","what":"Cluster assignments and predictions","title":"kmeans","text":"information provided model fit, primary objective typically cluster assignments observation. can accessed via extract_cluster_assignment() function: Note function renames clusters accordance standard celery naming convention ordering: clusters named “Cluster_1”, “Cluster_2”, etc. numbered order appear rows training dataset. Similarly, can “predict” cluster membership new data using predict_cluster() function: case kmeans, cluster assignment predicted finding closest final centroid new observation.","code":"kmeans_spec_fit %>%   extract_cluster_assignment() #> # A tibble: 342 × 1 #>    .cluster #>    <fct>    #>  1 C1       #>  2 C1       #>  3 C1       #>  4 C1       #>  5 C1       #>  6 C1       #>  7 C1       #>  8 C1       #>  9 C1       #> 10 C1       #> # … with 332 more rows new_penguin <- tibble(   bill_length_mm = 40,   bill_depth_mm = 15 )  kmeans_spec_fit %>%   predict_cluster(new_penguin) #> [1] 3 #> Levels: 1 2 3"},{"path":"/articles/kmeans.html","id":"augmenting-datasets","dir":"Articles","previous_headings":"k-means specification in {celery}","what":"Augmenting datasets","title":"kmeans","text":"attach cluster assignments predictions dataset, use augment_cluster():","code":"### add this"},{"path":"/articles/kmeans.html","id":"cluster-centroids","dir":"Articles","previous_headings":"k-means specification in {celery}","what":"Cluster centroids","title":"kmeans","text":"cluster typically characterized location final centroid. can accessed : [interpretation]","code":"kmeans_spec_fit %>%   extract_centroids() #> New names: #> • `` -> `...2` #> # A tibble: 3 × 2 #>   .cluster   ...2 #>   <chr>     <dbl> #> 1 Cluster_1  38.4 #> 2 Cluster_2  45.5 #> 3 Cluster_3  50.9"},{"path":"/articles/kmeans.html","id":"workflows","dir":"Articles","previous_headings":"","what":"Workflows","title":"kmeans","text":"","code":"penguins_recipe_1 <- recipe(~ bill_length_mm + bill_depth_mm,                             data = penguins)  penguins_recipe_2 <- recipe(species ~ bill_length_mm + bill_depth_mm,                             data = penguins)  # wflow_1 <- workflow() %>% #   add_celery_model(kmeans_spec) %>% #   add_recipe(penguins_recipe_1)"},{"path":"/articles/kmeans_metrics.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"kmeans_metrics","text":"","code":"kmeans_spec <- k_means(k = 3) %>%     set_engine_celery(\"stats\")     kmeans_fit <- kmeans_spec %>%   fit(~ bill_length_mm + bill_depth_mm,       data = penguins)  kmeans_fit %>% extract_centroids() #> New names: #> • `` -> `...2` #> # A tibble: 3 × 2 #>   .cluster   ...2 #>   <chr>     <dbl> #> 1 Cluster_1  38.4 #> 2 Cluster_2  45.5 #> 3 Cluster_3  50.9 kmeans_fit %>% extract_fit_summary() #> $cluster_names #> [1] \"Cluster_1\" \"Cluster_2\" \"Cluster_3\" #>  #> $centroids #> [1] 38.40355 45.51379 50.90353 #>  #> $n_members #> [1] 141 116  85 #>  #> $within_sse #> [1] 944.4986 754.7437 617.9859 #>  #> $tot_sse #> [1] 11494.04 #>  #> $orig_labels #>   1   2   3   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  #>   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   2   3  #>  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  #>   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3  #>  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  #>   3   3   2   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3  #>  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  #>   3   3   3   3   3   3   3   3   3   3   3   3   2   3   2   3   3   3   3   3  #>  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101  #>   2   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   2   3  #> 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121  #>   3   3   3   3   3   3   3   3   2   3   2   3   3   3   2   3   3   3   3   3  #> 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141  #>   3   3   3   3   3   3   3   3   2   3   2   3   3   3   3   3   3   3   3   3  #> 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161  #>   3   3   3   3   3   3   3   3   3   3   3   2   1   2   1   2   2   2   2   2  #> 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181  #>   2   2   1   2   2   2   1   2   1   2   1   1   2   2   2   2   2   2   2   2  #> 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201  #>   1   2   2   2   1   1   1   2   2   2   1   2   1   2   1   1   2   2   1   2  #> 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221  #>   2   2   2   2   1   2   2   2   2   2   1   2   2   2   1   2   1   2   1   2  #> 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241  #>   1   2   2   2   2   2   1   2   1   2   2   1   1   2   1   2   1   2   1   2  #> 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261  #>   1   2   1   2   1   2   1   1   2   2   1   2   1   2   1   2   2   2   1   2  #> 262 263 264 265 266 267 268 269 270 271 273 274 275 276 277 278 279 280 281 282  #>   2   1   1   2   1   2   1   2   1   2   2   1   2   1   2   1   1   2   1   2  #> 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302  #>   2   1   2   1   2   1   2   1   2   1   1   1   2   1   2   1   2   1   2   1  #> 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322  #>   1   1   2   1   3   1   2   1   1   2   2   1   2   1   1   2   1   2   1   1  #> 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342  #>   1   1   1   1   2   1   2   1   2   1   2   1   1   2   1   2   2   1   2   1  #> 343 344  #>   1   1"},{"path":"/articles/kmeans_metrics.html","id":"metrics","dir":"Articles","previous_headings":"","what":"Metrics","title":"kmeans_metrics","text":"","code":"kmeans_fit %>% within_cluster_sse() #> # A tibble: 3 × 2 #>   .cluster   sse #>   <fct>    <dbl> #> 1 C1        618. #> 2 C2        755. #> 3 C3        944. kmeans_fit %>% tot_wss() #> [1] 2317.228 kmeans_fit %>% tot_sse() #> [1] 11494.04 kmeans_fit %>% sse_ratio() #> [1] 0.2016026 # kmeans_fit %>% #   augment(penguins)  penguins <- penguins %>% drop_na()    dists <- penguins %>%   select(contains(\"bill\")) %>%   dist() %>%   as.matrix()  silhouettes(dists, predict(kmeans_fit, penguins)$.pred_cluster)  #> # A tibble: 333 × 3 #>    cluster   neighbor  sil_width #>    <fct>     <fct>         <dbl> #>  1 Cluster_3 Cluster_2     0.675 #>  2 Cluster_3 Cluster_2     0.606 #>  3 Cluster_3 Cluster_2     0.547 #>  4 Cluster_3 Cluster_2     0.692 #>  5 Cluster_3 Cluster_2     0.592 #>  6 Cluster_3 Cluster_2     0.671 #>  7 Cluster_3 Cluster_2     0.647 #>  8 Cluster_3 Cluster_2     0.370 #>  9 Cluster_3 Cluster_2     0.589 #> 10 Cluster_3 Cluster_2     0.577 #> # … with 323 more rows  avg_silhouette(dists, predict(kmeans_fit, penguins)$.pred_cluster) #> [1] 0.4844131"},{"path":"/articles/kmeans_metrics.html","id":"comparison-to-auxilary-variables","dir":"Articles","previous_headings":"Metrics","what":"Comparison to auxilary variables","title":"kmeans_metrics","text":"ALERT NAS STUPID","code":"penguins <- penguins %>%   drop_na(bill_length_mm, bill_depth_mm)   penguins %>%   cbind(extract_cluster_assignment(kmeans_fit)) %>%   enrichment(.cluster, species)"},{"path":"/articles/kmeans_metrics.html","id":"cross-validation","dir":"Articles","previous_headings":"","what":"Cross-Validation","title":"kmeans_metrics","text":"take full data assignments “ground truth”","code":""},{"path":"/articles/kmeans_metrics.html","id":"tuning","dir":"Articles","previous_headings":"","what":"Tuning","title":"kmeans_metrics","text":"Traditional “elbow” plot: (Note totss aka residual ss matter k, plots except scale y-axis. hypothesize ratio better cross validation.) enrichment?  penalized ChiSq type thing? Look .","code":"results_wss <- c() results_ratio <- c()  for (k in 2:10) {      kmeans_spec_k <- k_means(k = k) %>%     set_engine_celery(\"stats\")       kmeans_fit_k <- kmeans_spec_k %>%     fit(~ bill_length_mm + bill_depth_mm,         data = penguins)         results_ratio <- c(results_ratio, sse_ratio(kmeans_fit_k))   results_wss <- c(results_wss, wss(kmeans_fit_k)) }  plot(results_wss) plot(results_ratio) results_species <- c()  for (k in 2:10) {      kmeans_spec_k <- k_means(k = k) %>%     set_engine_celery(\"stats\")       kmeans_fit_k <- kmeans_spec_k %>%     fit(~ bill_length_mm + bill_depth_mm,         data = penguins)      res <- penguins %>%   cbind(extract_cluster_assignment(kmeans_fit_k)) %>%   enrichment(.cluster, species)      results_species <- c(results_species, res)  } #> Warning in stats::chisq.test(.): Chi-squared approximation may be incorrect  #> Warning in stats::chisq.test(.): Chi-squared approximation may be incorrect  #> Warning in stats::chisq.test(.): Chi-squared approximation may be incorrect  plot(results_species)"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Hvitfeldt. Author, maintainer. Kelly Bodwin. Author. RStudio. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hvitfeldt E, Bodwin K (2022). celery: Package (One Line, Title Case). R package version 0.0.0.9000, https://github.com/EmilHvitfeldt/celery.","code":"@Manual{,   title = {celery: What the Package Does (One Line, Title Case)},   author = {Emil Hvitfeldt and Kelly Bodwin},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/EmilHvitfeldt/celery}, }"},{"path":"/index.html","id":"celery","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal celery provide tidy, unified interface clustering models. packages closely modeled parsnip package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version celery GitHub : Please note package currently requires branch workflows package work. Use caution.","code":"# install.packages(\"devtools\") devtools::install_github(\"EmilHvitfeldt/celery\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (One Line, Title Case)","text":"first thing create cluster specification. example creating K-means model, using stats engine. specification can fit using data. fitted celery object, can number things. predict() returns cluster new observation belongs extract_cluster_assignment() returns cluster assignments training observations extract_clusters() returns locations clusters","code":"library(celery)  kmeans_spec <- k_means(k = 3) %>%   set_engine_celery(\"stats\")   kmeans_spec #> K Means Cluster Specification (partition) #>  #> Main Arguments: #>   k = 3 #>  #> Computational engine: stats kmeans_spec_fit <- kmeans_spec %>%   fit(~., data = mtcars) kmeans_spec_fit #> celery cluster object #>  #> K-means clustering with 3 clusters of sizes 14, 11, 7 #>  #> Cluster means: #>        mpg cyl     disp        hp     drat       wt     qsec        vs #> 1 15.10000   8 353.1000 209.21429 3.229286 3.999214 16.77214 0.0000000 #> 2 26.66364   4 105.1364  82.63636 4.070909 2.285727 19.13727 0.9090909 #> 3 19.74286   6 183.3143 122.28571 3.585714 3.117143 17.97714 0.5714286 #>          am     gear     carb #> 1 0.1428571 3.285714 3.500000 #> 2 0.7272727 4.090909 1.545455 #> 3 0.4285714 3.857143 3.428571 #>  #> Clustering vector: #>           Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive  #>                   3                   3                   2                   3  #>   Hornet Sportabout             Valiant          Duster 360           Merc 240D  #>                   1                   3                   1                   2  #>            Merc 230            Merc 280           Merc 280C          Merc 450SE  #>                   2                   3                   3                   1  #>          Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental  #>                   1                   1                   1                   1  #>   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla  #>                   1                   2                   2                   2  #>       Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28  #>                   2                   1                   1                   1  #>    Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa  #>                   1                   2                   2                   2  #>      Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E  #>                   1                   3                   1                   2  #>  #> Within cluster sum of squares by cluster: #> [1] 93643.90 11848.37 13954.34 #>  (between_SS / total_SS =  80.8 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\" predict(kmeans_spec_fit, mtcars[1:4, ]) #> # A tibble: 4 × 1 #>   .pred_cluster #>   <fct>         #> 1 3             #> 2 3             #> 3 2             #> 4 3 extract_cluster_assignment(kmeans_spec_fit) #> # A tibble: 32 × 1 #>    .cluster #>    <fct>    #>  1 C1       #>  2 C1       #>  3 C2       #>  4 C1       #>  5 C3       #>  6 C1       #>  7 C3       #>  8 C2       #>  9 C2       #> 10 C1       #> # … with 22 more rows extract_centroids(kmeans_spec_fit) #> New names: #> • `` -> `...2` #> # A tibble: 3 × 2 #>   .cluster   ...2 #>   <chr>     <dbl> #> 1 Cluster_1  19.7 #> 2 Cluster_2  26.7 #> 3 Cluster_3  15.1"},{"path":"/reference/ClusterR_kmeans_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","title":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","text":"wrapper runs ClusterR::KMeans_rcpp adds column names centroids field.","code":""},{"path":"/reference/ClusterR_kmeans_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","text":"","code":"ClusterR_kmeans_fit(   data,   clusters,   num_init = 1,   max_iters = 100,   initializer = \"kmeans++\",   fuzzy = FALSE,   verbose = FALSE,   CENTROIDS = NULL,   tol = 1e-04,   tol_optimal_init = 0.3,   seed = 1 )"},{"path":"/reference/ClusterR_kmeans_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","text":"data matrix data frame clusters number clusters num_init number times algorithm run different centroid seeds max_iters maximum number clustering iterations initializer method initialization. One , optimal_init, quantile_init, kmeans++ random. See details information fuzzy either TRUE FALSE. TRUE, prediction probabilities calculated using distance observations centroids verbose either TRUE FALSE, indicating whether progress printed clustering. CENTROIDS matrix initial cluster centroids. rows CENTROIDS matrix equal number clusters columns equal columns data. tol float number. , case iteration (iteration > 1 iteration < max_iters) 'tol' greater squared norm centroids, kmeans converged tol_optimal_init tolerance value 'optimal_init' initializer. higher value , far appart centroids . seed integer value random number generator (RNG)","code":""},{"path":"/reference/ClusterR_kmeans_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","text":"keras model object.","code":""},{"path":"/reference/add_on_exports.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions required for celery-adjacent packages — new_cluster_spec","title":"Functions required for celery-adjacent packages — new_cluster_spec","text":"functions helpful creating new packages register new cluster specifications.","code":""},{"path":"/reference/add_on_exports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions required for celery-adjacent packages — new_cluster_spec","text":"","code":"new_cluster_spec(cls, args, eng_args, mode, method, engine)"},{"path":"/reference/avg_silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Measures average silhouette between clusters — avg_silhouette","title":"Measures average silhouette between clusters — avg_silhouette","text":"Measures average silhouette clusters","code":""},{"path":"/reference/avg_silhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measures average silhouette between clusters — avg_silhouette","text":"","code":"avg_silhouette(.dist, clusters)"},{"path":"/reference/avg_silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measures average silhouette between clusters — avg_silhouette","text":".dist distance matrix clusters vector containing cluster assignments row order distance matrix.","code":""},{"path":"/reference/avg_silhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measures average silhouette between clusters — avg_silhouette","text":"silhouettes matrix.","code":""},{"path":"/reference/avg_silhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measures average silhouette between clusters — avg_silhouette","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  dists <- mtcars %>%   as.matrix() %>%   dist()  avg_silhouette(dists, kmeans_fit$fit$cluster) #> [1] 0.4576413"},{"path":"/reference/celery-package.html","id":null,"dir":"Reference","previous_headings":"","what":"celery: What the Package Does (One Line, Title Case) — celery-package","title":"celery: What the Package Does (One Line, Title Case) — celery-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"/reference/celery-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"celery: What the Package Does (One Line, Title Case) — celery-package","text":"Maintainer: Emil Hvitfeldt emilhhvitfeldt@gmail.com (ORCID) Authors: Kelly Bodwin kelly@bodwin.us contributors: RStudio [copyright holder, funder]","code":""},{"path":"/reference/check_empty_ellipse_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","title":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","text":"Check ensure ellipses empty","code":""},{"path":"/reference/check_empty_ellipse_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","text":"","code":"check_empty_ellipse_celery(...)"},{"path":"/reference/check_empty_ellipse_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","text":"... Extra arguments.","code":""},{"path":"/reference/check_empty_ellipse_celery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","text":"error thrown (non-empty ellipses), NULL list.","code":""},{"path":"/reference/control_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Control the fit function — control_celery","title":"Control the fit function — control_celery","text":"Options can passed fit.cluster_spec() function control output computations.","code":""},{"path":"/reference/control_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control the fit function — control_celery","text":"","code":"control_celery(verbosity = 1L, catch = FALSE)"},{"path":"/reference/control_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control the fit function — control_celery","text":"verbosity integer value zero indicates messages output shown packages loaded model fit. value 1 means package loading quiet model fits can produce output screen (depending contain verbose-type argument). value 2 indicates output seen. catch logical value TRUE evaluate model inside try(, silent = TRUE). model fails, object still returned (without error) inherits class \"try-error\".","code":""},{"path":"/reference/control_celery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control the fit function — control_celery","text":"S3 object class \"control_celery\" named list results function call","code":""},{"path":"/reference/convert_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions to convert between formula and matrix interface — .convert_form_to_x_fit","title":"Helper functions to convert between formula and matrix interface — .convert_form_to_x_fit","text":"Functions take formula interface get resulting objects (y, x, weights, etc) back way around. functions intended developer use. part, emulates internals lm() (also see notes https://developer.r-project.org/model-fitting-functions.html). .convert_form_to_x_fit() .convert_x_to_form_fit() data created modeling. .convert_form_to_x_fit() saves data objects well objects needed new data predicted (e.g. terms, etc.). .convert_form_to_x_new() .convert_x_to_form_new() used new samples predicted require predictors available.","code":""},{"path":"/reference/convert_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions to convert between formula and matrix interface — .convert_form_to_x_fit","text":"","code":".convert_form_to_x_fit(   formula,   data,   ...,   na.action = na.omit,   indicators = \"traditional\",   composition = \"data.frame\",   remove_intercept = TRUE )  .convert_x_to_form_fit(x, weights = NULL, remove_intercept = TRUE)  .convert_form_to_x_new(   object,   new_data,   na.action = stats::na.pass,   composition = \"data.frame\" )  .convert_x_to_form_new(object, new_data)"},{"path":"/reference/convert_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions to convert between formula and matrix interface — .convert_form_to_x_fit","text":"formula object class formula (one can coerced class): symbolic description model fitted. data data frame containing relevant variables (e.g. outcome(s), predictors, case weights, etc). ... Additional arguments passed stats::model.frame(). na.action function indicates happen data contain NAs. indicators string describing whether create indicator/dummy variables factor predictors. Possible options \"none\", \"traditional\", \"one_hot\". composition string describing whether resulting x y returned \"matrix\" \"data.frame\". remove_intercept logical indicating whether remove intercept column model.matrix() finished. x matrix, sparse matrix, data frame predictors. models support sparse matrix input. See celery::get_encoding_celery() details. x column names. weights numeric vector containing weights. object object class cluster_fit. new_data rectangular data object, data frame. y_name string specifying name outcome.","code":""},{"path":"/reference/enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Measures relationship between cluster assignments and another categorical variable. — enrichment","title":"Measures relationship between cluster assignments and another categorical variable. — enrichment","text":"Measures relationship cluster assignments another categorical variable.","code":""},{"path":"/reference/enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measures relationship between cluster assignments and another categorical variable. — enrichment","text":"","code":"enrichment(data, clusters, var)"},{"path":"/reference/enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measures relationship between cluster assignments and another categorical variable. — enrichment","text":"data dataset clusters variable cluster assignments var variables enrichment","code":""},{"path":"/reference/enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measures relationship between cluster assignments and another categorical variable. — enrichment","text":"p-value Chi-Square test relationship cluster assignments categorical variable.","code":""},{"path":"/reference/extract_centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract clusters from model — extract_centroids","title":"Extract clusters from model — extract_centroids","text":"Extract clusters model","code":""},{"path":"/reference/extract_centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract clusters from model — extract_centroids","text":"","code":"extract_centroids(object, ...)"},{"path":"/reference/extract_centroids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract clusters from model — extract_centroids","text":"object cluster_spec object. ... arguments passed methods.","code":""},{"path":"/reference/extract_centroids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract clusters from model — extract_centroids","text":"","code":"set.seed(1234) kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   extract_centroids() #> New names: #> • `` -> `...2` #> # A tibble: 5 × 2 #>   .cluster   ...2 #>   <chr>     <dbl> #> 1 Cluster_1  19.9 #> 2 Cluster_2  14.6 #> 3 Cluster_3  13.7 #> 4 Cluster_4  27.0 #> 5 Cluster_5  17.1"},{"path":"/reference/extract_cluster_assignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster assignments from model — extract_cluster_assignment","title":"Extract cluster assignments from model — extract_cluster_assignment","text":"Extract cluster assignments model","code":""},{"path":"/reference/extract_cluster_assignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster assignments from model — extract_cluster_assignment","text":"","code":"extract_cluster_assignment(object, ...)"},{"path":"/reference/extract_cluster_assignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cluster assignments from model — extract_cluster_assignment","text":"object cluster_spec object. ... arguments passed methods.","code":""},{"path":"/reference/extract_cluster_assignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract cluster assignments from model — extract_cluster_assignment","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   extract_cluster_assignment() #> # A tibble: 32 × 1 #>    .cluster #>    <fct>    #>  1 C1       #>  2 C1       #>  3 C1       #>  4 C2       #>  5 C3       #>  6 C2       #>  7 C4       #>  8 C1       #>  9 C1       #> 10 C1       #> # … with 22 more rows"},{"path":"/reference/extract_fit_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method to get fitted model summary info depending on engine — extract_fit_summary","title":"S3 method to get fitted model summary info depending on engine — extract_fit_summary","text":"S3 method get fitted model summary info depending engine","code":""},{"path":"/reference/extract_fit_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method to get fitted model summary info depending on engine — extract_fit_summary","text":"","code":"extract_fit_summary(object, ...)"},{"path":"/reference/extract_fit_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method to get fitted model summary info depending on engine — extract_fit_summary","text":"object fitted cluster_spec object ... arguments passed methods","code":""},{"path":"/reference/extract_fit_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method to get fitted model summary info depending on engine — extract_fit_summary","text":"list various summary elements","code":""},{"path":"/reference/extract_fit_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method to get fitted model summary info depending on engine — extract_fit_summary","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   extract_fit_summary() #> $cluster_names #> [1] \"Cluster_1\" \"Cluster_2\" \"Cluster_3\" \"Cluster_4\" \"Cluster_5\" #>  #> $centroids #> [1] 16.38333 19.75000 13.67500 14.60000 24.50000 #>  #> $n_members #> [1]  6  2  4  4 16 #>  #> $within_sse #> [1]  6815.5541   562.8304  4665.0415  7654.1463 32837.9972 #>  #> $tot_sse #> [1] 623387.5 #>  #> $orig_labels #>           Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive  #>                   3                   3                   3                   2  #>   Hornet Sportabout             Valiant          Duster 360           Merc 240D  #>                   5                   2                   4                   3  #>            Merc 230            Merc 280           Merc 280C          Merc 450SE  #>                   3                   3                   3                   5  #>          Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental  #>                   5                   5                   1                   1  #>   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla  #>                   1                   3                   3                   3  #>       Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28  #>                   3                   5                   5                   4  #>    Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa  #>                   1                   3                   3                   3  #>      Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E  #>                   4                   3                   4                   3  #>"},{"path":"/reference/fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Model Specification to a Data Set — fit.cluster_spec","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"fit() fit_xy() take model specification, translate_celery required code substituting arguments, execute model fit routine.","code":""},{"path":"/reference/fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"","code":"# S3 method for cluster_spec fit(object, formula, data, control = control_celery(), ...)  # S3 method for cluster_spec fit_xy(object, x, control = control_celery(), ...)"},{"path":"/reference/fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"object object class cluster_spec chosen engine (via set_engine_celery()). formula object class formula (one can coerced class): symbolic description model fitted. data Optional, depending interface (see Details ). data frame containing relevant variables (e.g. outcome(s), predictors, case weights, etc). Note: needed, named argument used. control named list elements verbosity catch. See control_celery(). ... currently used; values passed ignored. options required fit model passed using set_engine_celery(). x matrix, sparse matrix, data frame predictors. models support sparse matrix input. See celery::get_encoding_celery() details. x column names.","code":""},{"path":"/reference/fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"cluster_fit object contains several elements: lvl: outcome factor, contains factor levels time model fitting. spec: model specification object (object call fit) fit: model executed without error, model object. Otherwise, try-error object error message. preproc: objects needed convert formula non-formula interface (terms object) return value also class related fitted model (e.g. \"_kmeans\") base class \"cluster_fit\".","code":""},{"path":"/reference/fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"fit() fit_xy() substitute current arguments model specification computational engine's code, check validity, fit model using data engine-specific code. Different model functions different interfaces (e.g. formula x/y) functions translate_celery interface used fit() fit_xy() invoked one required underlying model. possible, functions attempt avoid making copies data. example, underlying model uses formula fit() invoked, original data references model fit. However, underlying model uses something else, x/y, formula evaluated data converted required format. case, calls resulting model objects reference temporary objects used fit model. model engine set, model's default engine used (discussed model page). verbosity option control_celery() greater zero, warning produced. like use alternative method generating contrasts supplying formula fit(), set global option contrasts preferred method. example, might set : options(contrasts = c(unordered = \"contr.helmert\", ordered = \"contr.poly\")). See help page stats::contr.treatment() possible contrast types.","code":""},{"path":[]},{"path":"/reference/fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  kmeans_mod <- k_means(k = 5)  using_formula <-   kmeans_mod %>%   set_engine_celery(\"stats\") %>%   fit(~., data = mtcars)  using_x <-   kmeans_mod %>%   set_engine_celery(\"stats\") %>%   fit_xy(x = mtcars)  using_formula #> celery cluster object #>  #> K-means clustering with 5 clusters of sizes 7, 7, 4, 10, 4 #>  #> Cluster means: #>        mpg cyl     disp        hp     drat       wt     qsec        vs #> 1 24.18571   4 121.7143  94.28571 3.924286 2.508286 19.10286 0.8571429 #> 2 19.74286   6 183.3143 122.28571 3.585714 3.117143 17.97714 0.5714286 #> 3 13.67500   8 443.0000 206.25000 3.060000 4.966000 17.56750 0.0000000 #> 4 15.67000   8 317.1400 210.40000 3.297000 3.612500 16.45400 0.0000000 #> 5 31.00000   4  76.1250  62.25000 4.327500 1.896250 19.19750 1.0000000 #>          am     gear     carb #> 1 0.5714286 4.142857 1.714286 #> 2 0.4285714 3.857143 3.428571 #> 3 0.0000000 3.000000 3.500000 #> 4 0.2000000 3.400000 3.500000 #> 5 1.0000000 4.000000 1.250000 #>  #> Clustering vector: #>           Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive  #>                   2                   2                   1                   2  #>   Hornet Sportabout             Valiant          Duster 360           Merc 240D  #>                   4                   2                   4                   1  #>            Merc 230            Merc 280           Merc 280C          Merc 450SE  #>                   1                   2                   2                   4  #>          Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental  #>                   4                   4                   3                   3  #>   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla  #>                   3                   5                   5                   5  #>       Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28  #>                   1                   4                   4                   4  #>    Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa  #>                   3                   5                   1                   1  #>      Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E  #>                   4                   2                   4                   1  #>  #> Within cluster sum of squares by cluster: #> [1]  3616.8297 13954.3363  4665.0415 43649.5192   208.0365 #>  (between_SS / total_SS =  89.4 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"       using_x #> celery cluster object #>  #> K-means clustering with 5 clusters of sizes 6, 16, 4, 2, 4 #>  #> Cluster means: #>        mpg   cyl     disp       hp   drat     wt     qsec   vs     am  gear #> 1 16.38333 8.000 301.5667 169.1667 3.0450 3.6625 17.36500 0.00 0.0000 3.000 #> 2 24.50000 4.625 122.2937  96.8750 4.0025 2.5180 18.54312 0.75 0.6875 4.125 #> 3 13.67500 8.000 443.0000 206.2500 3.0600 4.9660 17.56750 0.00 0.0000 3.000 #> 4 19.75000 6.000 241.5000 107.5000 2.9200 3.3375 19.83000 1.00 0.0000 3.000 #> 5 14.60000 8.000 340.5000 272.2500 3.6750 3.5375 15.08750 0.00 0.5000 4.000 #>     carb #> 1 2.5000 #> 2 2.4375 #> 3 3.5000 #> 4 1.0000 #> 5 5.0000 #>  #> Clustering vector: #>           Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive  #>                   2                   2                   2                   4  #>   Hornet Sportabout             Valiant          Duster 360           Merc 240D  #>                   1                   4                   5                   2  #>            Merc 230            Merc 280           Merc 280C          Merc 450SE  #>                   2                   2                   2                   1  #>          Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental  #>                   1                   1                   3                   3  #>   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla  #>                   3                   2                   2                   2  #>       Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28  #>                   2                   1                   1                   5  #>    Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa  #>                   3                   2                   2                   2  #>      Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E  #>                   5                   2                   5                   2  #>  #> Within cluster sum of squares by cluster: #> [1]  6815.5541 32837.9972  4665.0415   562.8304  7654.1463 #>  (between_SS / total_SS =  91.6 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\""},{"path":"/reference/get_model_env_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with the celery model environment — get_model_env_celery","title":"Working with the celery model environment — get_model_env_celery","text":"functions read write environment package stores information model specifications.","code":""},{"path":"/reference/get_model_env_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Working with the celery model environment — get_model_env_celery","text":"","code":"get_model_env_celery()  get_from_env_celery(items)  set_env_val_celery(name, value)"},{"path":"/reference/get_model_env_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Working with the celery model environment — get_model_env_celery","text":"items character string objects model environment. name single character value new symbol model environment. value single value new value model environment. ... Named values assigned model environment.","code":""},{"path":"/reference/get_model_env_celery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with the celery model environment — get_model_env_celery","text":"","code":"# Access the model data: current_code <- get_model_env_celery() ls(envir = current_code) #> [1] \"k_means\"          \"k_means_args\"     \"k_means_encoding\" \"k_means_fit\"      #> [5] \"k_means_modes\"    \"k_means_pkgs\"     \"k_means_predict\"  \"models\"           #> [9] \"modes\""},{"path":"/reference/glance.cluster_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a single row summary ","title":"Construct a single row summary ","text":"method glances model celery model object, exists.","code":""},{"path":"/reference/glance.cluster_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a single row summary ","text":"","code":"# S3 method for cluster_fit glance(x, ...)"},{"path":"/reference/glance.cluster_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a single row summary ","text":"x model R object convert single-row data frame ... arguments passed methods","code":""},{"path":"/reference/glance.cluster_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a single row summary ","text":"tibble","code":""},{"path":"/reference/k_means.html","id":null,"dir":"Reference","previous_headings":"","what":"K-Means — k_means","title":"K-Means — k_means","text":"k_means() defines model fits clusters based distances number centers.","code":""},{"path":"/reference/k_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-Means — k_means","text":"","code":"k_means(mode = \"partition\", engine = \"stats\", k = NULL)"},{"path":"/reference/k_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-Means — k_means","text":"mode single character string type model. possible value model \"partition\". engine single character string specifying computational engine use fitting. Possible engines listed . default model \"stats\". k Positive integer, number clusters model.","code":""},{"path":"/reference/k_means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-Means — k_means","text":"","code":"# show_engines(\"k_means\")  k_means() #> K Means Cluster Specification (partition) #>  #> Computational engine: stats  #>"},{"path":"/reference/make_classes_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepend a new class — make_classes_celery","title":"Prepend a new class — make_classes_celery","text":"adds extra class base class \"cluster_spec\".","code":""},{"path":"/reference/make_classes_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepend a new class — make_classes_celery","text":"","code":"make_classes_celery(prefix)"},{"path":"/reference/make_classes_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepend a new class — make_classes_celery","text":"prefix character string class.","code":""},{"path":"/reference/make_classes_celery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepend a new class — make_classes_celery","text":"character vector.","code":""},{"path":"/reference/other_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Other predict methods. — predict_cluster","title":"Other predict methods. — predict_cluster","text":"internal functions meant directly called user.","code":""},{"path":"/reference/other_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Other predict methods. — predict_cluster","text":"","code":"predict_cluster(object, ...)  # S3 method for cluster_fit predict_cluster(object, new_data, ...)"},{"path":"/reference/other_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Other predict methods. — predict_cluster","text":"object object class cluster_fit ... Arguments underlying model's prediction function passed (see opts). new_data rectangular data object, data frame.","code":""},{"path":"/reference/predict.cluster_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions — predict.cluster_fit","title":"Model predictions — predict.cluster_fit","text":"Apply model create different types predictions. predict() can used types models uses \"type\" argument specificity.","code":""},{"path":"/reference/predict.cluster_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions — predict.cluster_fit","text":"","code":"# S3 method for cluster_fit predict(object, new_data, type = NULL, opts = list(), ...)"},{"path":"/reference/predict.cluster_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions — predict.cluster_fit","text":"object object class cluster_fit new_data rectangular data object, data frame. type single character value NULL. Possible values \"cluster\", \"raw\". NULL, predict() choose appropriate value based model's mode. opts list optional arguments underlying predict function used type = \"raw\". list include options model object new data predicted. ... Arguments underlying model's prediction function passed (see opts).","code":""},{"path":"/reference/predict.cluster_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions — predict.cluster_fit","text":"exception type = \"raw\", results predict.cluster_fit() tibble many rows output rows new_data column names predictable. clustering results single outcome, tibble .pred_cluster. Using type = \"raw\" predict.cluster_fit() return unadulterated results prediction function. model fit failed error captured, predict() function return structure filled missing values. currently work multivariate models.","code":""},{"path":"/reference/predict.cluster_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model predictions — predict.cluster_fit","text":"\"type\" supplied predict(), choice made: type = \"cluster\" clustering models predict() designed provide tidy result (see \"Value\" section ) tibble output format.","code":""},{"path":"/reference/predict.cluster_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model predictions — predict.cluster_fit","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   predict(new_data = mtcars) #> # A tibble: 32 × 1 #>    .pred_cluster #>    <fct>         #>  1 1             #>  2 1             #>  3 5             #>  4 2             #>  5 4             #>  6 1             #>  7 4             #>  8 5             #>  9 5             #> 10 1             #> # … with 22 more rows"},{"path":"/reference/prepare_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data based on parsnip encoding information — prepare_data","title":"Prepare data based on parsnip encoding information — prepare_data","text":"Prepare data based parsnip encoding information","code":""},{"path":"/reference/prepare_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data based on parsnip encoding information — prepare_data","text":"","code":"prepare_data(object, new_data)"},{"path":"/reference/prepare_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data based on parsnip encoding information — prepare_data","text":"object parsnip model object new_data data frame","code":""},{"path":"/reference/prepare_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data based on parsnip encoding information — prepare_data","text":"data frame matrix","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics fit, fit_xy, glance, tidy magrittr %>%","code":""},{"path":"/reference/set_engine_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a computational engine and specific arguments — set_engine_celery","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"set_engine_celery() used specify package system used fit model, along arguments specific software.","code":""},{"path":"/reference/set_engine_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"","code":"set_engine_celery(object, engine, ...)"},{"path":"/reference/set_engine_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"object model specification. engine character string software used fit model. highly dependent type model (e.g. K-means, etc.). ... optional arguments associated chosen computational engine. captured quosures can tune().","code":""},{"path":"/reference/set_engine_celery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"updated model specification.","code":""},{"path":"/reference/set_engine_celery.html","id":"engines","dir":"Reference","previous_headings":"","what":"Engines","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"Based currently loaded packages, following lists set engines available model specification.","code":""},{"path":"/reference/set_engine_celery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"","code":"# First, set general arguments using the standardized names mod <- k_means(k = 10) %>%   # now say how you want to fit the model and another other options   set_engine_celery(\"stats\", iter.max = 15)  translate_celery(mod, engine = \"stats\") #> K Means Cluster Specification (partition) #>  #> Main Arguments: #>   k = 10 #>  #> Engine-Specific Arguments: #>   iter.max = 15 #>  #> Computational engine: stats  #>  #> Model fit template: #> stats::kmeans(x = missing_arg(), centers = missing_arg(), centers = 10,  #>     iter.max = 15)"},{"path":"/reference/set_new_model_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools to Register Models — set_new_model_celery","title":"Tools to Register Models — set_new_model_celery","text":"functions similar constructors can used validate conflicts underlying model structures used package.","code":""},{"path":"/reference/set_new_model_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools to Register Models — set_new_model_celery","text":"","code":"set_new_model_celery(model)  check_model_doesnt_exist_celery(model)  set_model_mode_celery(model, mode)  check_model_exists_celery(model)  set_model_engine_celery(model, mode, eng)  set_dependency_celery(model, eng, pkg = \"celery\", mode = NULL)  get_dependency_celery(model)  set_fit_celery(model, mode, eng, value)  get_fit_celery(model)  get_encoding_celery(model)  set_encoding_celery(model, mode, eng, options)  set_model_arg_celery(model, eng, celery, original, func, has_submodel)  show_model_info_celery(model)  set_pred_celery(model, mode, eng, type, value)  get_pred_type_celery(model, type)"},{"path":"/reference/set_new_model_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools to Register Models — set_new_model_celery","text":"model single character string model type (e.g. \"k_means\", etc). mode single character string model mode (e.g. \"partition\"). eng single character string model engine. pkg options character string package name. value list conforms fit_obj pred_obj description , depending context. options list options engine-specific preprocessing encodings. See Details . celery single character string \"harmonized\" argument name celery exposes. original single character string argument name underlying model function uses. func named character vector describes call function. func elements pkg fun. former optional recommended latter required. example, c(pkg = \"stats\", fun = \"lm\") used invoke usual linear regression function. cases, helpful use c(fun = \"predict\") using package's predict method. has_submodel single logical whether argument can make predictions multiple submodels . type single character value type prediction. Possible values : cluster raw. arg single character string model argument name. fit_obj list elements interface, protect, func defaults. See package vignette \"Making celery model scratch\". pred_obj list elements pre, post, func, args. pre, post Optional functions pre- post-processing prediction results. ... Optional arguments passed args slot prediction objects.","code":""},{"path":"/reference/set_new_model_celery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools to Register Models — set_new_model_celery","text":"functions available users add models engines (package otherwise) can accessed using celery. short, celery stores environment object contains information code models used (e.g. fitting, predicting, etc). functions can used add models environment well helper functions can used makes sure model data right format. check_model_exists_celery() checks model value ensures model already registered. check_model_doesnt_exist_celery() checks model value also checks see novel environment. options engine-specific encodings dictate predictors handled. options ensure data celery gives underlying model allows model fit similar possible produced directly. example, fit() used fit model formula interface, typically predictor preprocessing must conducted. glmnet good example . four options can used encodings: predictor_indicators describes whether create indicator/dummy variables factor predictors. three options: \"none\" (expand factor predictors), \"traditional\" (apply standard model.matrix() encodings), \"one_hot\" (create complete set including baseline level factors). encoding affects cases fit.cluster_spec() used underlying model x/y interface. Another option compute_intercept; controls whether model.matrix() include intercept formula. affects inclusion intercept column. intercept, model.matrix() computes dummy variables one factor levels. Without intercept, model.matrix() computes full set indicators first factor variable, incomplete set remainder. Next, option remove_intercept remove intercept column model.matrix() finished. can useful model function (e.g. lm()) automatically generates intercept. Finally, allow_sparse_x specifies whether model function can natively accommodate sparse matrix representation predictors fitting tuning.","code":""},{"path":"/reference/set_new_model_celery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tools to Register Models — set_new_model_celery","text":"","code":"# set_new_model_celery(\"shallow_learning_model\")  # Show the information about a model: show_model_info_celery(\"k_means\") #> Information for `k_means` #>  modes: unknown, partition  #>  #>  engines:  #>    partition: ClusterR, stats #>  #>  arguments:  #>    stats:     #>       k --> centers #>    ClusterR:  #>       k --> clusters #>  #>  fit modules: #>      engine      mode #>       stats partition #>    ClusterR partition #>  #>  prediction modules: #>         mode   engine methods #>    partition ClusterR cluster #>    partition    stats cluster #>"},{"path":"/reference/silhouettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Measures silhouettes between clusters — silhouettes","title":"Measures silhouettes between clusters — silhouettes","text":"Measures silhouettes clusters","code":""},{"path":"/reference/silhouettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measures silhouettes between clusters — silhouettes","text":"","code":"silhouettes(.dist, clusters)"},{"path":"/reference/silhouettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measures silhouettes between clusters — silhouettes","text":".dist distance matrix clusters vector containing cluster assignments row order distance matrix.","code":""},{"path":"/reference/silhouettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measures silhouettes between clusters — silhouettes","text":"silhouettes matrix.","code":""},{"path":"/reference/silhouettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measures silhouettes between clusters — silhouettes","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  dists <- mtcars %>%   as.matrix() %>%   dist()  silhouettes(dists, kmeans_fit$fit$cluster) #> # A tibble: 32 × 3 #>    cluster   neighbor  sil_width #>    <fct>     <fct>         <dbl> #>  1 Cluster_4 Cluster_1     0.572 #>  2 Cluster_4 Cluster_1     0.572 #>  3 Cluster_4 Cluster_1     0.752 #>  4 Cluster_1 Cluster_4     0.540 #>  5 Cluster_3 Cluster_5     0.149 #>  6 Cluster_1 Cluster_4     0.224 #>  7 Cluster_3 Cluster_5     0.649 #>  8 Cluster_4 Cluster_1     0.613 #>  9 Cluster_4 Cluster_1     0.692 #> 10 Cluster_4 Cluster_1     0.460 #> # … with 22 more rows"},{"path":"/reference/sse_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the ratio of the WSS to the total SSE — sse_ratio","title":"Compute the ratio of the WSS to the total SSE — sse_ratio","text":"Compute ratio WSS total SSE","code":""},{"path":"/reference/sse_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the ratio of the WSS to the total SSE — sse_ratio","text":"","code":"sse_ratio(object, ...)"},{"path":"/reference/sse_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the ratio of the WSS to the total SSE — sse_ratio","text":"object cluster_spec object. ... arguments passed methods.","code":""},{"path":"/reference/sse_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the ratio of the WSS to the total SSE — sse_ratio","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   sse_ratio() #> [1] 0.107121"},{"path":"/reference/tidy.cluster_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","title":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","text":"method tidies model celery model object, exists.","code":""},{"path":"/reference/tidy.cluster_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","text":"","code":"# S3 method for cluster_fit tidy(x, ...)"},{"path":"/reference/tidy.cluster_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","text":"x object converted tidy tibble::tibble(). ... Additional arguments tidying method.","code":""},{"path":"/reference/tidy.cluster_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","text":"tibble","code":""},{"path":"/reference/tot_sse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the total sum of squares — tot_sse","title":"Compute the total sum of squares — tot_sse","text":"Compute total sum squares","code":""},{"path":"/reference/tot_sse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the total sum of squares — tot_sse","text":"","code":"tot_sse(object, ...)"},{"path":"/reference/tot_sse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the total sum of squares — tot_sse","text":"object cluster_spec object. ... arguments passed methods.","code":""},{"path":"/reference/tot_sse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the total sum of squares — tot_sse","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   tot_sse() #> [1] 623387.5"},{"path":"/reference/tot_wss.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sum of within-cluster SSE — tot_wss","title":"Compute the sum of within-cluster SSE — tot_wss","text":"Compute sum within-cluster SSE","code":""},{"path":"/reference/tot_wss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the sum of within-cluster SSE — tot_wss","text":"","code":"tot_wss(object, ...)"},{"path":"/reference/tot_wss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sum of within-cluster SSE — tot_wss","text":"object cluster_spec object. ... arguments passed methods.","code":""},{"path":"/reference/tot_wss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sum of within-cluster SSE — tot_wss","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   tot_wss() #> [1] 64096.21"},{"path":"/reference/translate_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve a Model Specification for a Computational Engine — translate_celery","title":"Resolve a Model Specification for a Computational Engine — translate_celery","text":"translate_celery() translate_celery model specification code object specific particular engine (e.g. R package). translate_celerys generic parameters counterparts.","code":""},{"path":"/reference/translate_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve a Model Specification for a Computational Engine — translate_celery","text":"","code":"translate_celery(x, ...)  # S3 method for default translate_celery(x, engine = x$engine, ...)"},{"path":"/reference/translate_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve a Model Specification for a Computational Engine — translate_celery","text":"x model specification. ... currently used. engine computational engine model (see ?set_engine_celery).","code":""},{"path":"/reference/translate_celery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resolve a Model Specification for a Computational Engine — translate_celery","text":"translate_celery() produces template call lacks specific argument values (data, etc). filled fit() called specifics data model. call may also include tune() arguments specification. handle tune() arguments, need use tune package. information see https://www.tidymodels.org/start/tuning/ contain resolved argument names specific model fitting function/engine. function can useful need understand celery goes generic model specific model fitting function. Note: function used internally users use understand underlying syntax . used modify cluster specification.","code":""},{"path":"/reference/within_cluster_sse.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Sum of Squared Error in each cluster — within_cluster_sse","title":"Calculates Sum of Squared Error in each cluster — within_cluster_sse","text":"Calculates Sum Squared Error cluster","code":""},{"path":"/reference/within_cluster_sse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Sum of Squared Error in each cluster — within_cluster_sse","text":"","code":"within_cluster_sse(object, ...)"},{"path":"/reference/within_cluster_sse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Sum of Squared Error in each cluster — within_cluster_sse","text":"object fitted kmeans celery model ... arguments passed methods.","code":""},{"path":"/reference/within_cluster_sse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Sum of Squared Error in each cluster — within_cluster_sse","text":"tibble two columns, cluster name SSE within cluster.","code":""},{"path":"/reference/within_cluster_sse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Sum of Squared Error in each cluster — within_cluster_sse","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   within_cluster_sse() #> # A tibble: 5 × 2 #>   .cluster    sse #>   <fct>     <dbl> #> 1 C1        3617. #> 2 C2        6356. #> 3 C3       46659. #> 4 C4        7256. #> 5 C5         208."}]
