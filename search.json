[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 celery authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Hvitfeldt. Author, maintainer. Kelly Bodwin. Author. RStudio. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hvitfeldt E, Bodwin K (2022). celery: Package (One Line, Title Case). R package version 0.0.0.9000, https://github.com/EmilHvitfeldt/celery.","code":"@Manual{,   title = {celery: What the Package Does (One Line, Title Case)},   author = {Emil Hvitfeldt and Kelly Bodwin},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/EmilHvitfeldt/celery}, }"},{"path":[]},{"path":"/index.html","id":"celery-is-in-the-very-early-stages-of-development-functions-are-likely-to-change-functionality-as-well-as-names-use-at-your-own-risk","dir":"","previous_headings":"","what":"Celery is in the VERY early stages of development. Functions are likely to change functionality as well as names. Use at your own risk!","title":"What the Package Does (One Line, Title Case)","text":"goal celery provide tidy, unified interface clustering models. packages closely modeled parsnip package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version celery GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"EmilHvitfeldt/celery\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (One Line, Title Case)","text":"first thing create cluster specification. example creating K-means model, using stats engine. specification can fit using data. fitted celery object, can number things. predict() returns cluster new observation belongs extract_cluster_assignment() returns cluster assignments training observations extract_clusters() returns locations clusters","code":"library(celery)  kmeans_spec <- k_means(k = 3) %>%   set_engine_celery(\"stats\")   kmeans_spec #> K Means Cluster Specification (partition) #>  #> Main Arguments: #>   k = 3 #>  #> Computational engine: stats kmeans_spec_fit <- kmeans_spec %>%   fit(~., data = mtcars) kmeans_spec_fit #> celery cluster object #>  #> K-means clustering with 3 clusters of sizes 14, 11, 7 #>  #> Cluster means: #>        mpg cyl     disp        hp     drat       wt     qsec        vs #> 1 15.10000   8 353.1000 209.21429 3.229286 3.999214 16.77214 0.0000000 #> 2 26.66364   4 105.1364  82.63636 4.070909 2.285727 19.13727 0.9090909 #> 3 19.74286   6 183.3143 122.28571 3.585714 3.117143 17.97714 0.5714286 #>          am     gear     carb #> 1 0.1428571 3.285714 3.500000 #> 2 0.7272727 4.090909 1.545455 #> 3 0.4285714 3.857143 3.428571 #>  #> Clustering vector: #>           Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive  #>                   3                   3                   2                   3  #>   Hornet Sportabout             Valiant          Duster 360           Merc 240D  #>                   1                   3                   1                   2  #>            Merc 230            Merc 280           Merc 280C          Merc 450SE  #>                   2                   3                   3                   1  #>          Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental  #>                   1                   1                   1                   1  #>   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla  #>                   1                   2                   2                   2  #>       Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28  #>                   2                   1                   1                   1  #>    Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa  #>                   1                   2                   2                   2  #>      Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E  #>                   1                   3                   1                   2  #>  #> Within cluster sum of squares by cluster: #> [1] 93643.90 11848.37 13954.34 #>  (between_SS / total_SS =  80.8 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\" predict(kmeans_spec_fit, mtcars[1:4, ]) #> # A tibble: 4 × 1 #>   .pred_cluster #>   <fct>         #> 1 3             #> 2 3             #> 3 2             #> 4 3 extract_cluster_assignment(kmeans_spec_fit) #> # A tibble: 32 × 1 #>    .cluster #>    <fct>    #>  1 3        #>  2 3        #>  3 2        #>  4 3        #>  5 1        #>  6 3        #>  7 1        #>  8 2        #>  9 2        #> 10 3        #> # … with 22 more rows extract_clusters(kmeans_spec_fit) #> # A tibble: 3 × 12 #>   .cluster   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <fct>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 1         15.1     8  353. 209.   3.23  4.00  16.8 0     0.143  3.29  3.5  #> 2 2         26.7     4  105.  82.6  4.07  2.29  19.1 0.909 0.727  4.09  1.55 #> 3 3         19.7     6  183. 122.   3.59  3.12  18.0 0.571 0.429  3.86  3.43"},{"path":"/reference/ClusterR_kmeans_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","title":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","text":"wrapper runs ClusterR::KMeans_rcpp adds column names centroids field.","code":""},{"path":"/reference/ClusterR_kmeans_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","text":"","code":"ClusterR_kmeans_fit(   data,   clusters,   num_init = 1,   max_iters = 100,   initializer = \"kmeans++\",   fuzzy = FALSE,   verbose = FALSE,   CENTROIDS = NULL,   tol = 1e-04,   tol_optimal_init = 0.3,   seed = 1 )"},{"path":"/reference/ClusterR_kmeans_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","text":"data matrix data frame clusters number clusters num_init number times algorithm run different centroid seeds max_iters maximum number clustering iterations initializer method initialization. One , optimal_init, quantile_init, kmeans++ random. See details information fuzzy either TRUE FALSE. TRUE, prediction probabilities calculated using distance observations centroids verbose either TRUE FALSE, indicating whether progress printed clustering. CENTROIDS matrix initial cluster centroids. rows CENTROIDS matrix equal number clusters columns equal columns data. tol float number. , case iteration (iteration > 1 iteration < max_iters) 'tol' greater squared norm centroids, kmeans converged tol_optimal_init tolerance value 'optimal_init' initializer. higher value , far appart centroids . seed integer value random number generator (RNG)","code":""},{"path":"/reference/ClusterR_kmeans_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Wrapper around ClusterR kmeans — ClusterR_kmeans_fit","text":"keras model object.","code":""},{"path":"/reference/add_on_exports.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions required for celery-adjacent packages — new_cluster_spec","title":"Functions required for celery-adjacent packages — new_cluster_spec","text":"functions helpful creating new packages register new cluster specifications.","code":""},{"path":"/reference/add_on_exports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions required for celery-adjacent packages — new_cluster_spec","text":"","code":"new_cluster_spec(cls, args, eng_args, mode, method, engine)"},{"path":"/reference/celery-package.html","id":null,"dir":"Reference","previous_headings":"","what":"celery: What the Package Does (One Line, Title Case) — celery-package","title":"celery: What the Package Does (One Line, Title Case) — celery-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"/reference/celery-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"celery: What the Package Does (One Line, Title Case) — celery-package","text":"Maintainer: Emil Hvitfeldt emilhhvitfeldt@gmail.com (ORCID) Authors: Kelly Bodwin kelly@bodwin.us contributors: RStudio [copyright holder, funder]","code":""},{"path":"/reference/check_empty_ellipse_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","title":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","text":"Check ensure ellipses empty","code":""},{"path":"/reference/check_empty_ellipse_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","text":"","code":"check_empty_ellipse_celery(...)"},{"path":"/reference/check_empty_ellipse_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","text":"... Extra arguments.","code":""},{"path":"/reference/check_empty_ellipse_celery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check to ensure that ellipses are empty — check_empty_ellipse_celery","text":"error thrown (non-empty ellipses), NULL list.","code":""},{"path":"/reference/control_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Control the fit function — control_celery","title":"Control the fit function — control_celery","text":"Options can passed fit.cluster_spec() function control output computations.","code":""},{"path":"/reference/control_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control the fit function — control_celery","text":"","code":"control_celery(verbosity = 1L, catch = FALSE)"},{"path":"/reference/control_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control the fit function — control_celery","text":"verbosity integer value zero indicates messages output shown packages loaded model fit. value 1 means package loading quiet model fits can produce output screen (depending contain verbose-type argument). value 2 indicates output seen. catch logical value TRUE evaluate model inside try(, silent = TRUE). model fails, object still returned (without error) inherits class \"try-error\".","code":""},{"path":"/reference/control_celery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control the fit function — control_celery","text":"S3 object class \"control_celery\" named list results function call","code":""},{"path":"/reference/convert_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions to convert between formula and matrix interface — .convert_form_to_x_fit","title":"Helper functions to convert between formula and matrix interface — .convert_form_to_x_fit","text":"Functions take formula interface get resulting objects (y, x, weights, etc) back way around. functions intended developer use. part, emulates internals lm() (also see notes https://developer.r-project.org/model-fitting-functions.html). .convert_form_to_x_fit() .convert_x_to_form_fit() data created modeling. .convert_form_to_x_fit() saves data objects well objects needed new data predicted (e.g. terms, etc.). .convert_form_to_x_new() .convert_x_to_form_new() used new samples predicted require predictors available.","code":""},{"path":"/reference/convert_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions to convert between formula and matrix interface — .convert_form_to_x_fit","text":"","code":".convert_form_to_x_fit(   formula,   data,   ...,   na.action = na.omit,   indicators = \"traditional\",   composition = \"data.frame\",   remove_intercept = TRUE )  .convert_x_to_form_fit(x, weights = NULL, remove_intercept = TRUE)  .convert_form_to_x_new(   object,   new_data,   na.action = stats::na.pass,   composition = \"data.frame\" )  .convert_x_to_form_new(object, new_data)"},{"path":"/reference/convert_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions to convert between formula and matrix interface — .convert_form_to_x_fit","text":"formula object class formula (one can coerced class): symbolic description model fitted. data data frame containing relevant variables (e.g. outcome(s), predictors, case weights, etc). ... Additional arguments passed stats::model.frame(). na.action function indicates happen data contain NAs. indicators string describing whether create indicator/dummy variables factor predictors. Possible options \"none\", \"traditional\", \"one_hot\". composition string describing whether resulting x y returned \"matrix\" \"data.frame\". remove_intercept logical indicating whether remove intercept column model.matrix() finished. x matrix, sparse matrix, data frame predictors. models support sparse matrix input. See celery::get_encoding_celery() details. x column names. weights numeric vector containing weights. object object class cluster_fit. new_data rectangular data object, data frame. y_name string specifying name outcome.","code":""},{"path":"/reference/extract_cluster_assignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster assignments from model — extract_cluster_assignment","title":"Extract cluster assignments from model — extract_cluster_assignment","text":"Extract cluster assignments model","code":""},{"path":"/reference/extract_cluster_assignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster assignments from model — extract_cluster_assignment","text":"","code":"extract_cluster_assignment(object, ...)"},{"path":"/reference/extract_cluster_assignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cluster assignments from model — extract_cluster_assignment","text":"object cluster_spec object. ... arguments passed methods.","code":""},{"path":"/reference/extract_cluster_assignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract cluster assignments from model — extract_cluster_assignment","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   extract_cluster_assignment() #> # A tibble: 32 × 1 #>    .cluster #>    <fct>    #>  1 2        #>  2 2        #>  3 3        #>  4 5        #>  5 1        #>  6 2        #>  7 1        #>  8 3        #>  9 3        #> 10 2        #> # … with 22 more rows"},{"path":"/reference/extract_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract clusters from model — extract_clusters","title":"Extract clusters from model — extract_clusters","text":"Extract clusters model","code":""},{"path":"/reference/extract_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract clusters from model — extract_clusters","text":"","code":"extract_clusters(object, ...)"},{"path":"/reference/extract_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract clusters from model — extract_clusters","text":"object cluster_spec object. ... arguments passed methods.","code":""},{"path":"/reference/extract_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract clusters from model — extract_clusters","text":"","code":"set.seed(1234) kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   extract_clusters() #> # A tibble: 5 × 12 #>   .cluster   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <fct>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 1         19.9  5.71  167. 120.   3.71  3.11  18.5 0.571 0.429   4    3.57 #> 2 2         13.7  8     443  206.   3.06  4.97  17.6 0     0       3    3.5  #> 3 3         27.0  4     102.  81.4  4.09  2.20  18.8 0.9   0.8     4.1  1.5  #> 4 4         17.1  7.71  295. 161.   3.05  3.60  17.7 0.143 0       3    2.29 #> 5 5         14.6  8     340. 272.   3.68  3.54  15.1 0     0.5     4    5"},{"path":"/reference/fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Model Specification to a Data Set — fit.cluster_spec","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"fit() fit_xy() take model specification, translate_celery required code substituting arguments, execute model fit routine.","code":""},{"path":"/reference/fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"","code":"# S3 method for cluster_spec fit(object, formula, data, control = control_celery(), ...)  # S3 method for cluster_spec fit_xy(object, x, control = control_celery(), ...)"},{"path":"/reference/fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"object object class cluster_spec chosen engine (via set_engine_celery()). formula object class formula (one can coerced class): symbolic description model fitted. data Optional, depending interface (see Details ). data frame containing relevant variables (e.g. outcome(s), predictors, case weights, etc). Note: needed, named argument used. control named list elements verbosity catch. See control_celery(). ... currently used; values passed ignored. options required fit model passed using set_engine_celery(). x matrix, sparse matrix, data frame predictors. models support sparse matrix input. See celery::get_encoding_celery() details. x column names.","code":""},{"path":"/reference/fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"cluster_fit object contains several elements: lvl: outcome factor, contains factor levels time model fitting. spec: model specification object (object call fit) fit: model executed without error, model object. Otherwise, try-error object error message. preproc: objects needed convert formula non-formula interface (terms object) return value also class related fitted model (e.g. \"_kmeans\") base class \"cluster_fit\".","code":""},{"path":"/reference/fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"fit() fit_xy() substitute current arguments model specification computational engine's code, check validity, fit model using data engine-specific code. Different model functions different interfaces (e.g. formula x/y) functions translate_celery interface used fit() fit_xy() invoked one required underlying model. possible, functions attempt avoid making copies data. example, underlying model uses formula fit() invoked, original data references model fit. However, underlying model uses something else, x/y, formula evaluated data converted required format. case, calls resulting model objects reference temporary objects used fit model. model engine set, model's default engine used (discussed model page). verbosity option control_celery() greater zero, warning produced. like use alternative method generating contrasts supplying formula fit(), set global option contrasts preferred method. example, might set : options(contrasts = c(unordered = \"contr.helmert\", ordered = \"contr.poly\")). See help page stats::contr.treatment() possible contrast types.","code":""},{"path":[]},{"path":"/reference/fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Model Specification to a Data Set — fit.cluster_spec","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  kmeans_mod <- k_means(k = 5)  using_formula <-   kmeans_mod %>%   set_engine_celery(\"stats\") %>%   fit(~., data = mtcars)  using_x <-   kmeans_mod %>%   set_engine_celery(\"stats\") %>%   fit_xy(x = mtcars)  using_formula #> celery cluster object #>  #> K-means clustering with 5 clusters of sizes 6, 4, 16, 4, 2 #>  #> Cluster means: #>        mpg   cyl     disp       hp   drat     wt     qsec   vs     am  gear #> 1 16.38333 8.000 301.5667 169.1667 3.0450 3.6625 17.36500 0.00 0.0000 3.000 #> 2 13.67500 8.000 443.0000 206.2500 3.0600 4.9660 17.56750 0.00 0.0000 3.000 #> 3 24.50000 4.625 122.2937  96.8750 4.0025 2.5180 18.54312 0.75 0.6875 4.125 #> 4 14.60000 8.000 340.5000 272.2500 3.6750 3.5375 15.08750 0.00 0.5000 4.000 #> 5 19.75000 6.000 241.5000 107.5000 2.9200 3.3375 19.83000 1.00 0.0000 3.000 #>     carb #> 1 2.5000 #> 2 3.5000 #> 3 2.4375 #> 4 5.0000 #> 5 1.0000 #>  #> Clustering vector: #>           Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive  #>                   3                   3                   3                   5  #>   Hornet Sportabout             Valiant          Duster 360           Merc 240D  #>                   1                   5                   4                   3  #>            Merc 230            Merc 280           Merc 280C          Merc 450SE  #>                   3                   3                   3                   1  #>          Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental  #>                   1                   1                   2                   2  #>   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla  #>                   2                   3                   3                   3  #>       Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28  #>                   3                   1                   1                   4  #>    Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa  #>                   2                   3                   3                   3  #>      Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E  #>                   4                   3                   4                   3  #>  #> Within cluster sum of squares by cluster: #> [1]  6815.5541  4665.0415 32837.9972  7654.1463   562.8304 #>  (between_SS / total_SS =  91.6 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"       using_x #> celery cluster object #>  #> K-means clustering with 5 clusters of sizes 4, 2, 16, 4, 6 #>  #> Cluster means: #>        mpg   cyl     disp       hp   drat     wt     qsec   vs     am  gear #> 1 13.67500 8.000 443.0000 206.2500 3.0600 4.9660 17.56750 0.00 0.0000 3.000 #> 2 19.75000 6.000 241.5000 107.5000 2.9200 3.3375 19.83000 1.00 0.0000 3.000 #> 3 24.50000 4.625 122.2937  96.8750 4.0025 2.5180 18.54312 0.75 0.6875 4.125 #> 4 14.60000 8.000 340.5000 272.2500 3.6750 3.5375 15.08750 0.00 0.5000 4.000 #> 5 16.38333 8.000 301.5667 169.1667 3.0450 3.6625 17.36500 0.00 0.0000 3.000 #>     carb #> 1 3.5000 #> 2 1.0000 #> 3 2.4375 #> 4 5.0000 #> 5 2.5000 #>  #> Clustering vector: #>           Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive  #>                   3                   3                   3                   2  #>   Hornet Sportabout             Valiant          Duster 360           Merc 240D  #>                   5                   2                   4                   3  #>            Merc 230            Merc 280           Merc 280C          Merc 450SE  #>                   3                   3                   3                   5  #>          Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental  #>                   5                   5                   1                   1  #>   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla  #>                   1                   3                   3                   3  #>       Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28  #>                   3                   5                   5                   4  #>    Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa  #>                   1                   3                   3                   3  #>      Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E  #>                   4                   3                   4                   3  #>  #> Within cluster sum of squares by cluster: #> [1]  4665.0415   562.8304 32837.9972  7654.1463  6815.5541 #>  (between_SS / total_SS =  91.6 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\""},{"path":"/reference/get_model_env_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with the celery model environment — get_model_env_celery","title":"Working with the celery model environment — get_model_env_celery","text":"functions read write environment package stores information model specifications.","code":""},{"path":"/reference/get_model_env_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Working with the celery model environment — get_model_env_celery","text":"","code":"get_model_env_celery()  get_from_env_celery(items)  set_env_val_celery(name, value)"},{"path":"/reference/get_model_env_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Working with the celery model environment — get_model_env_celery","text":"items character string objects model environment. name single character value new symbol model environment. value single value new value model environment. ... Named values assigned model environment.","code":""},{"path":"/reference/get_model_env_celery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with the celery model environment — get_model_env_celery","text":"","code":"# Access the model data: current_code <- get_model_env_celery() ls(envir = current_code) #> [1] \"k_means\"          \"k_means_args\"     \"k_means_encoding\" \"k_means_fit\"      #> [5] \"k_means_modes\"    \"k_means_pkgs\"     \"k_means_predict\"  \"models\"           #> [9] \"modes\""},{"path":"/reference/glance.cluster_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a single row summary ","title":"Construct a single row summary ","text":"method glances model celery model object, exists.","code":""},{"path":"/reference/glance.cluster_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a single row summary ","text":"","code":"# S3 method for cluster_fit glance(x, ...)"},{"path":"/reference/glance.cluster_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a single row summary ","text":"x model R object convert single-row data frame ... arguments passed methods","code":""},{"path":"/reference/glance.cluster_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a single row summary ","text":"tibble","code":""},{"path":"/reference/k_means.html","id":null,"dir":"Reference","previous_headings":"","what":"K-Means — k_means","title":"K-Means — k_means","text":"k_means() defines model fits clusters based distances number centers.","code":""},{"path":"/reference/k_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-Means — k_means","text":"","code":"k_means(mode = \"partition\", engine = \"stats\", k = NULL)"},{"path":"/reference/k_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-Means — k_means","text":"mode single character string type model. possible value model \"partition\". engine single character string specifying computational engine use fitting. Possible engines listed . default model \"stats\". k Positive integer, number clusters model.","code":""},{"path":"/reference/k_means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-Means — k_means","text":"","code":"# show_engines(\"k_means\")  k_means() #> K Means Cluster Specification (partition) #>  #> Computational engine: stats  #>"},{"path":"/reference/make_classes_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepend a new class — make_classes_celery","title":"Prepend a new class — make_classes_celery","text":"adds extra class base class \"cluster_spec\".","code":""},{"path":"/reference/make_classes_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepend a new class — make_classes_celery","text":"","code":"make_classes_celery(prefix)"},{"path":"/reference/make_classes_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepend a new class — make_classes_celery","text":"prefix character string class.","code":""},{"path":"/reference/make_classes_celery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepend a new class — make_classes_celery","text":"character vector.","code":""},{"path":"/reference/other_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Other predict methods. — predict_cluster","title":"Other predict methods. — predict_cluster","text":"internal functions meant directly called user.","code":""},{"path":"/reference/other_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Other predict methods. — predict_cluster","text":"","code":"predict_cluster(object, ...)  # S3 method for cluster_fit predict_cluster(object, new_data, ...)"},{"path":"/reference/other_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Other predict methods. — predict_cluster","text":"object object class cluster_fit ... Arguments underlying model's prediction function passed (see opts). new_data rectangular data object, data frame.","code":""},{"path":"/reference/predict.cluster_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions — predict.cluster_fit","title":"Model predictions — predict.cluster_fit","text":"Apply model create different types predictions. predict() can used types models uses \"type\" argument specificity.","code":""},{"path":"/reference/predict.cluster_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions — predict.cluster_fit","text":"","code":"# S3 method for cluster_fit predict(object, new_data, type = NULL, opts = list(), ...)"},{"path":"/reference/predict.cluster_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions — predict.cluster_fit","text":"object object class cluster_fit new_data rectangular data object, data frame. type single character value NULL. Possible values \"cluster\", \"raw\". NULL, predict() choose appropriate value based model's mode. opts list optional arguments underlying predict function used type = \"raw\". list include options model object new data predicted. ... Arguments underlying model's prediction function passed (see opts).","code":""},{"path":"/reference/predict.cluster_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions — predict.cluster_fit","text":"exception type = \"raw\", results predict.cluster_fit() tibble many rows output rows new_data column names predictable. clustering results single outcome, tibble .pred_cluster. Using type = \"raw\" predict.cluster_fit() return unadulterated results prediction function. model fit failed error captured, predict() function return structure filled missing values. currently work multivariate models.","code":""},{"path":"/reference/predict.cluster_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model predictions — predict.cluster_fit","text":"\"type\" supplied predict(), choice made: type = \"cluster\" clustering models predict() designed provide tidy result (see \"Value\" section ) tibble output format.","code":""},{"path":"/reference/predict.cluster_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model predictions — predict.cluster_fit","text":"","code":"kmeans_spec <- k_means(k = 5) %>%   set_engine_celery(\"stats\")  kmeans_fit <- fit(kmeans_spec, ~., mtcars)  kmeans_fit %>%   predict(new_data = mtcars) #> # A tibble: 32 × 1 #>    .pred_cluster #>    <fct>         #>  1 2             #>  2 2             #>  3 1             #>  4 2             #>  5 4             #>  6 2             #>  7 4             #>  8 1             #>  9 1             #> 10 2             #> # … with 22 more rows"},{"path":"/reference/prepare_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data based on parsnip encoding information — prepare_data","title":"Prepare data based on parsnip encoding information — prepare_data","text":"Prepare data based parsnip encoding information","code":""},{"path":"/reference/prepare_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data based on parsnip encoding information — prepare_data","text":"","code":"prepare_data(object, new_data)"},{"path":"/reference/prepare_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data based on parsnip encoding information — prepare_data","text":"object parsnip model object new_data data frame","code":""},{"path":"/reference/prepare_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data based on parsnip encoding information — prepare_data","text":"data frame matrix","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics fit, fit_xy, glance, tidy magrittr %>%","code":""},{"path":"/reference/set_engine_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a computational engine and specific arguments — set_engine_celery","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"set_engine_celery() used specify package system used fit model, along arguments specific software.","code":""},{"path":"/reference/set_engine_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"","code":"set_engine_celery(object, engine, ...)"},{"path":"/reference/set_engine_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"object model specification. engine character string software used fit model. highly dependent type model (e.g. K-means, etc.). ... optional arguments associated chosen computational engine. captured quosures can tune().","code":""},{"path":"/reference/set_engine_celery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"updated model specification.","code":""},{"path":"/reference/set_engine_celery.html","id":"engines","dir":"Reference","previous_headings":"","what":"Engines","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"Based currently loaded packages, following lists set engines available model specification.","code":""},{"path":"/reference/set_engine_celery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare a computational engine and specific arguments — set_engine_celery","text":"","code":"# First, set general arguments using the standardized names mod <- k_means(k = 10) %>%   # now say how you want to fit the model and another other options   set_engine_celery(\"stats\", iter.max = 15)  translate_celery(mod, engine = \"stats\") #> K Means Cluster Specification (partition) #>  #> Main Arguments: #>   k = 10 #>  #> Engine-Specific Arguments: #>   iter.max = 15 #>  #> Computational engine: stats  #>  #> Model fit template: #> stats::kmeans(x = missing_arg(), centers = missing_arg(), centers = 10,  #>     iter.max = 15)"},{"path":"/reference/set_new_model_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools to Register Models — set_new_model_celery","title":"Tools to Register Models — set_new_model_celery","text":"functions similar constructors can used validate conflicts underlying model structures used package.","code":""},{"path":"/reference/set_new_model_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools to Register Models — set_new_model_celery","text":"","code":"set_new_model_celery(model)  check_model_doesnt_exist_celery(model)  set_model_mode_celery(model, mode)  check_model_exists_celery(model)  set_model_engine_celery(model, mode, eng)  set_dependency_celery(model, eng, pkg = \"celery\", mode = NULL)  get_dependency_celery(model)  set_fit_celery(model, mode, eng, value)  get_fit_celery(model)  get_encoding_celery(model)  set_encoding_celery(model, mode, eng, options)  set_model_arg_celery(model, eng, celery, original, func, has_submodel)  show_model_info_celery(model)  set_pred_celery(model, mode, eng, type, value)  get_pred_type_celery(model, type)"},{"path":"/reference/set_new_model_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools to Register Models — set_new_model_celery","text":"model single character string model type (e.g. \"k_means\", etc). mode single character string model mode (e.g. \"partition\"). eng single character string model engine. pkg options character string package name. value list conforms fit_obj pred_obj description , depending context. options list options engine-specific preprocessing encodings. See Details . celery single character string \"harmonized\" argument name celery exposes. original single character string argument name underlying model function uses. func named character vector describes call function. func elements pkg fun. former optional recommended latter required. example, c(pkg = \"stats\", fun = \"lm\") used invoke usual linear regression function. cases, helpful use c(fun = \"predict\") using package's predict method. has_submodel single logical whether argument can make predictions multiple submodels . type single character value type prediction. Possible values : cluster raw. arg single character string model argument name. fit_obj list elements interface, protect, func defaults. See package vignette \"Making celery model scratch\". pred_obj list elements pre, post, func, args. pre, post Optional functions pre- post-processing prediction results. ... Optional arguments passed args slot prediction objects.","code":""},{"path":"/reference/set_new_model_celery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools to Register Models — set_new_model_celery","text":"functions available users add models engines (package otherwise) can accessed using celery. short, celery stores environment object contains information code models used (e.g. fitting, predicting, etc). functions can used add models environment well helper functions can used makes sure model data right format. check_model_exists_celery() checks model value ensures model already registered. check_model_doesnt_exist_celery() checks model value also checks see novel environment. options engine-specific encodings dictate predictors handled. options ensure data celery gives underlying model allows model fit similar possible produced directly. example, fit() used fit model formula interface, typically predictor preprocessing must conducted. glmnet good example . four options can used encodings: predictor_indicators describes whether create indicator/dummy variables factor predictors. three options: \"none\" (expand factor predictors), \"traditional\" (apply standard model.matrix() encodings), \"one_hot\" (create complete set including baseline level factors). encoding affects cases fit.cluster_spec() used underlying model x/y interface. Another option compute_intercept; controls whether model.matrix() include intercept formula. affects inclusion intercept column. intercept, model.matrix() computes dummy variables one factor levels. Without intercept, model.matrix() computes full set indicators first factor variable, incomplete set remainder. Next, option remove_intercept remove intercept column model.matrix() finished. can useful model function (e.g. lm()) automatically generates intercept. Finally, allow_sparse_x specifies whether model function can natively accommodate sparse matrix representation predictors fitting tuning.","code":""},{"path":"/reference/set_new_model_celery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tools to Register Models — set_new_model_celery","text":"","code":"# set_new_model_celery(\"shallow_learning_model\")  # Show the information about a model: show_model_info_celery(\"k_means\") #> Information for `k_means` #>  modes: unknown, partition  #>  #>  engines:  #>    partition: ClusterR, stats #>  #>  arguments:  #>    stats:     #>       k --> centers #>    ClusterR:  #>       k --> clusters #>  #>  fit modules: #>      engine      mode #>       stats partition #>    ClusterR partition #>  #>  prediction modules: #>         mode   engine methods #>    partition ClusterR cluster #>    partition    stats cluster #>"},{"path":"/reference/tidy.cluster_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","title":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","text":"method tidies model celery model object, exists.","code":""},{"path":"/reference/tidy.cluster_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","text":"","code":"# S3 method for cluster_fit tidy(x, ...)"},{"path":"/reference/tidy.cluster_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","text":"x object converted tidy tibble::tibble(). ... Additional arguments tidying method.","code":""},{"path":"/reference/tidy.cluster_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a celery model object into a tidy tibble — tidy.cluster_fit","text":"tibble","code":""},{"path":"/reference/translate_celery.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve a Model Specification for a Computational Engine — translate_celery","title":"Resolve a Model Specification for a Computational Engine — translate_celery","text":"translate_celery() translate_celery model specification code object specific particular engine (e.g. R package). translate_celerys generic parameters counterparts.","code":""},{"path":"/reference/translate_celery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve a Model Specification for a Computational Engine — translate_celery","text":"","code":"translate_celery(x, ...)  # S3 method for default translate_celery(x, engine = x$engine, ...)"},{"path":"/reference/translate_celery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve a Model Specification for a Computational Engine — translate_celery","text":"x model specification. ... currently used. engine computational engine model (see ?set_engine_celery).","code":""},{"path":"/reference/translate_celery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resolve a Model Specification for a Computational Engine — translate_celery","text":"translate_celery() produces template call lacks specific argument values (data, etc). filled fit() called specifics data model. call may also include tune() arguments specification. handle tune() arguments, need use tune package. information see https://www.tidymodels.org/start/tuning/ contain resolved argument names specific model fitting function/engine. function can useful need understand celery goes generic model specific model fitting function. Note: function used internally users use understand underlying syntax . used modify cluster specification.","code":""}]
